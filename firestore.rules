rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Admin function to check if user is admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Allow authenticated users to read/write to users collection and subcollections
    match /users/{document=**} {
      allow read, write: if request.auth != null;
    }

    // Admin collection - only admins can read/write
    match /admins/{adminId} {
      allow read: if request.auth != null && (request.auth.uid == adminId || isAdmin());
      allow write: if request.auth != null && isAdmin();
    }

    // Rules for the 'schools' collection
    match /schools/{schoolId} {
      // Allow any authenticated user to read school information
      allow read: if request.auth != null;
      // Allow admins to write to schools
      allow write: if request.auth != null && isAdmin();

      // Rules for the 'users' subcollection within each school
      match /users/{userIdInSchoolDoc} {
        allow read: if request.auth != null && (request.auth.uid == userIdInSchoolDoc || isAdmin());
        allow write: if request.auth != null && (request.auth.uid == userIdInSchoolDoc || isAdmin());
      }

      // School bot configurations
      match /bots/{botId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && isAdmin();
      }
    }
    
    // Rules for 'bots' top-level collection
    match /bots/{botId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }

    // System metadata and configurations - admin only
    match /system/{docId} {
      allow read, write: if request.auth != null && isAdmin();
    }

    // Knowledge metadata - admin only for writes
    match /knowledge_metadata/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
  }
}